# This workflow will install Python dependencies
# After build the workflow will run all unit tests with pytest using a test matrix
# On successful build and test it will create a docker image for productive environment and push it to a container repository

name: Prod - Build, deploy, unit and integration test

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master




jobs:
  build-and-local-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.8
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade --no-cache-dir pip
          python -m pip install --no-cache-dir pipenv
          pip install -r requirements.txt
      - name: Local unit and integrations test
        run: |
          python3 -m pytest
  deploy-docker-container-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build the container
        run: docker-compose -f docker-compose.prod-qa.yml up -d
      - name: Docker container unit and integrations test
        run: |
          docker exec --workdir /var/www/Canonical-flask-app flask_container python3 -m pytest
  merge-request-to-prod:
    #if: github.base_ref == 'staging'
    runs-on: ubuntu-latest
    needs: [build-and-local-test,deploy-docker-container-and-test]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - name: Create merge/pull request
        env:
          GITHUB_TOKEN: ${{secrets.TOKEN}}
          BRANCH: master
          MERGE_METHOD: merge
          MERGE_RETRIES: "100"
          UPDATE_METHOD: merge
          UPDATE_RETRIES: "100"
        run: |
          if [ ${{github.base_ref}} == 'master' ] && [ ${{ github.event_name }} == 'pull_request' ] && [ ${{github.head_ref}} == 'staging' ]; then
            gh pr merge --auto --merge
          else
            echo "production push"
          fi

# This workflow will install Python dependencies
# After build the workflow will run all unit tests with pytest using a test matrix
# On successful build and test it will create a docker image for productive environment and push it to a container repository

name: Prod - Build, deploy, unit and integration test

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master




jobs:
  build-and-local-test:
    if: ${{ (github.base_ref == 'master' && github.event_name == 'pull_request' && github.head_ref == 'staging') || (github.event_name == 'push') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.8
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade --no-cache-dir pip
          python -m pip install --no-cache-dir pipenv
          pip install -r requirements.txt
      - name: Local unit and integrations test
        run: |
          python3 -m pytest
  deploy-docker-container-and-test:
    if: ${{ (github.base_ref == 'master' && github.event_name == 'pull_request' && github.head_ref == 'staging') || (github.event_name == 'push') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build the container
        run: docker-compose -f docker-compose.prod-qa.yml up -d
      - name: Docker container unit and integrations test
        run: |
          docker exec --workdir /var/www/Canonical-flask-app flask_container python3 -m pytest
  check-master-pull-request:
    runs-on: ubuntu-latest
    needs: [build-and-local-test,deploy-docker-container-and-test]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - name: Verify merge from staging or push onto master
        env:
          GITHUB_TOKEN: ${{secrets.TOKEN}}
        run: |
          if [ ${{github.base_ref}} == 'master' ] && [ ${{ github.event_name }} == 'pull_request' ] && [ ${{github.head_ref}} == 'staging' ]; then
            echo "pull request from staging to prod"
          elif [ ${{ github.event_name }} == 'push' ]; then
            echo "prod push"
          else
            echo ${{github.base_ref}}
            echo ${{github.event_name}}
            echo ${{github.head_ref}}
            echo "Error: Pull request to prod/master branch must come from 'staging' branch"
            exit 1
          fi

# This workflow will install Python dependencies
# After that the workflow will also run all unit tests and integration tests via pytest

name: DEV - Build, deploy, unit and integration test

on:
  pull_request:
    branches-ignore: [master,staging]
  push:
    branches-ignore: [master,staging]




jobs:
  build-and-local-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.8
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade --no-cache-dir pip
          python -m pip install --no-cache-dir pipenv
          pip install -r requirements.txt
      - name: Local unit and integrations test
        run: |
          python3 -m pytest
  deploy-docker-container-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build the container
        run: docker-compose -f docker-compose.dev.yml up -d
      - name: Docker container unit and integrations test
        run: |
          docker exec --workdir /var/www/Canonical-flask-app flask_container python3 -m pytest
  deploy-docker-image:
    runs-on: ubuntu-latest
    needs: [build-and-local-test,deploy-docker-container-and-test]
    steps:
      - uses: actions/checkout@v4
        name: Check out code

      - uses: mr-smithers-excellent/docker-build-push@v6
        name: Build & push local Docker image to docker hub
        with:
          image: throwawayrat68/canonical-flask-app-flask_api
          tags: v1, latest
          registry: docker.io
          dockerfile: FlaskApp.Dockerfile
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
  merge-request-to-staging:
    runs-on: ubuntu-latest
    needs: [build-and-local-test,deploy-docker-container-and-test,deploy-docker-image]
    steps:
      - uses: actions/checkout@v4
        name: Check out code
      - name: Create merge/pull request
        env:
          GITHUB_TOKEN: ${{secrets.TOKEN}}
        run: |
          gh pr create --title "Merge to Staging" --body "This is an automated PR to update staging" --base staging
          gh pr merge --auto
      #- uses: peter-evans/create-pull-request@v6
        #name: Create pull/merge request to staging
        #with:
          #base: staging
          #branch: dev
          #body:
            #Auto merge from dev to staging branch
          #token: ${{secrets.TOKEN}}

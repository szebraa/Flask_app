name: Staging - Build, deploy, unit and integration test

on:
  pull_request:
    branches: [staging]
  push:
    branches: [staging]


#${{ github.event_name }} == pull_request

jobs:
  build-and-local-test:
    if: ${{ (github.base_ref == 'staging' && github.event_name == 'pull_request' && github.head_ref == 'dev') || (github.base_ref == 'master' &&  github.event_name == 'push') || (github.event_name == 'commit') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.8
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade --no-cache-dir pip
          python -m pip install --no-cache-dir pipenv
          pip install -r requirements.txt
      - name: Local unit and integrations test
        run: |
          python3 -m pytest
  deploy-docker-container-and-test:
    if: ${{ (github.base_ref == 'staging' && github.event_name == 'pull_request' && github.head_ref == 'dev') || (github.base_ref == 'master' &&  github.event_name == 'push') || (github.event_name == 'commit') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build the container
        run: docker-compose -f docker-compose.prod-qa.yml up -d
      - name: Docker container unit and integrations test
        run: |
          docker exec --workdir /var/www/Canonical-flask-app flask_container python3 -m pytest
  merge-request-to-prod:
    #if: github.base_ref == 'staging'
    runs-on: ubuntu-latest
    needs: [build-and-local-test,deploy-docker-container-and-test]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - name: Create merge/pull request
        env:
          GITHUB_TOKEN: ${{secrets.TOKEN}}
          BRANCH: staging
          MERGE_METHOD: merge
          MERGE_RETRIES: "100"
          UPDATE_METHOD: merge
          UPDATE_RETRIES: "100"
        run: |
          if [ ${{github.base_ref}} == 'staging' ] && [ ${{ github.event_name }} == 'pull_request' ] && [ ${{github.head_ref}} == 'dev' ]; then
            gh pr create --head staging --base master --title "Merge to Prod" --body "This is an automated PR to update prod"
            gh pr merge --auto --merge
          elif [ ${{github.base_ref}} == 'master' ] && [ ${{ github.event_name }} == 'push' ]; then
            echo "Merge to prod completed"
            gh pr merge --auto --merge
          elif [ ${{ github.event_name }} == 'commit' ]; then
            echo "performing commit into staging branch"
          else
            echo ${{github.base_ref}}
            echo ${{github.event_name}}
            echo ${{github.head_ref}}
            echo "Error: Pull request must come from 'dev' branch"
            exit 1
          fi
